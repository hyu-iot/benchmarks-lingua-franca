/**
 *  Savina benchmark: Quicksort
 *  
 *  @author Yunsang Cho 
 *  @author Byungkeun Choi
 *  @author Wonseo Choi
 */

 target TypeScript {
    fast: true
};

//import BenchmarkRunner from "../BenchmarkRunner.lf";

reactor QuickSort_Unit(capacity: number(2048), data: {=Array<number>=}({=[]=}) , my_position: {=Pos=}({=Pos.INIT=})){

    input sort_in:{=Array<number>=};
    input result_in:{=Array<number>=};
    input position_in:{=Pos=};
    output sort_out:{=Array<number>=};
    output result_out:{=Array<number>=};
    output position_out:{=Pos=};
    output result:{=Array<number>=};
    //output new_result:{=Array<number>=};
    state num_fragment:number(0);
    state current:{=Array<number>=}({=[]=});
    state pivot:number;
    state position_of_child:{=Pos=};
    preamble {=

        function filter_less_than(data:Array<number>, pivot:number): Array<number> {
            const result: number[] = [];
            data.forEach(element => {
                if (element < pivot)    result.push(element);
            });
            return result;
        }
        function filter_eqauls_to(data:Array<number>, pivot:number): Array<number> {
            const result: number[] = [];
            data.forEach(element => {
                if (element == pivot)    result.push(element);
            });
            return result;
        }
        function filter_between(data:Array<number>, left_pivot:number, right_pivot:number): Array<number> {
            const result: number[] = [];
            data.forEach(element => {
                if (element >= left_pivot && element <= right_pivot)    result.push(element);
            });
            return result;
        }
        function filter_greater_than(data:Array<number>, pivot:number): Array<number> {
            const result: number[] = [];
            data.forEach(element => {
                if (element > pivot)    result.push(element);
            });
            return result;
        }
        function quicksort_seq(data:Array<number>): Array<number> {
            if (data.length < 2)    return data;
            const pivot:number = data[Math.floor(data.length/2)];
            const left_unsorted:number[] = filter_less_than(data, pivot);
            const left_sorted:number[] = quicksort_seq(left_unsorted);
            const equal_elements:number[] = filter_eqauls_to(data, pivot);
            const right_unsorted:number[] = filter_greater_than(data, pivot);
            const right_sorted:number[] = quicksort_seq(right_unsorted);
            const sorted_array:number[] = [...left_sorted, ...equal_elements, ...right_sorted];
            return sorted_array;
        }
    =}


    reaction(startup) {=
        console.log("Result: ", quicksort_seq(data));
        //new_result = quicksort_seq(data);
    =}

    mutation(sort_in, result_in, position_in) -> sort_out, result_out, position_out{=

        if (sort_in) {
            data = sort_in as Array<number>;
            if (data.length < capacity) {
              result_out = quicksort_seq(data);
              //need to check using log
                 
            } else {
                pivot = data[Math.floor(data.length/2)];
                const left_unsorted = filter_less_than(data, pivot);
                const right_unsorted = filter_greater_than(data, pivot);
                let left_reactor = new QuickSort_Unit(this.getReactor(), capacity, left_unsorted, Pos.LEFT);
                let right_reactor = new QuickSort_Unit(this.getReactor(), capacity, right_unsorted, Pos.RIGHT);
                
                var sort_out_port = __sort_out.getPort();
                this.connect(sort_out_port , left_reactor.sort_in);
                this.connect(sort_out_port , right_reactor.sort_in);
                //For result in and out, we need to make new parent unit for merge'
                let parent = new QuickSort_Unit(this.getReactor(), capacity, data, my_position);
                this.connect(left_reactor.position_out, parent.position_in);
                this.connect(right_reactor.position_out, parent.position_in);
                this.connect(left_reactor.result_out, parent.result_in);
                this.connect(right_reactor.result_out, parent.result_in);

                // Not allowed -> effect determinism
                // var result_in_port = __result_in.getPort();
                // this.connect(left_reactor.sort_out , result_in_port);
                // this.connect(right_reactor.sort_out , result_in_port);
                current = filter_eqauls_to(data, pivot);
            }
        }

        if (result_in) {
            if (position_in){
                position_of_child = position_in;
                position_out = my_position;
            }
            if (result_in.length) {
                if (position_of_child === Pos.LEFT) {
                    current = [...result_in, ...current];
                } else if (position_of_child === Pos.RIGHT) {
                    current = [...current, ...result_in];
                }
            }
            num_fragment++;
            //need to check using log
            // console.log("Num_fragment: ", num_fragment);
            if (num_fragment == 2) {
                result_out = current;
                //need to check using log
                //console.log("Result: ", result_out);
                
            }

        }

    =}
}


reactor Source(num_data:number(1000000), max_value:number(0), final_result:{=Array<number>=}({=[]=})) {
    input start:boolean;
    input result:{=Array<number>=};
    output end:boolean;
    output result_msg:{=Array<number>=};
    output sort_msg:{=Array<number>=}
    output position_msg:{=Pos=}
    state new_array:{=Array<number>=}({=[]=});

    reaction(start) -> sort_msg, result_msg, position_msg {=
        sort_msg = new Array<number>(num_data);
        //sort_msg.fill(0).map(() => Math.floor(Math.random() * num_data))
        for(var i = 0; i< sort_msg.length; i++){
            sort_msg[i] = i;
        }
        for (let index = sort_msg.length - 1; index > 0; index--) {
            // make random index value. (has array length longer than 0 )
            const randomPosition = Math.floor(Math.random() * (index + 1));
            // save the original value on temp, and mix the array elements using randomPosition.
            const temporary = sort_msg[index];
            sort_msg[index] = sort_msg[randomPosition];
            sort_msg[randomPosition] = temporary;
        }
        console.log("Before: " + sort_msg);
        result_msg = new Array<number>(1);
        position_msg = Pos.INIT;
    =}


    // //No need
    // reaction(result) -> end{=
    //     end = true;
    //     console.log("Final result: " + result)
    // =}


}

main reactor QuickSort(num_iterations: number(12)) {
    preamble {=
        enum Pos {INIT, RIGHT, LEFT};
        let position:Pos;
    =}
    state startTime: time;
    //runner = new BenchmarkRunner(numIterations = num_iterations);
    source = new Source(num_data = 100, max_value = 0, final_result={=[]=});
    unit = new QuickSort_Unit(capacity=10, data={=[]=}, my_position = {=Pos.INIT=});

    //runner.start -> source.start;
    reaction (startup)->source.start{=
        source.start = true;
    =}

    // //No need
    // reaction (source.end) {=
    //     if (startTime) {
    //         let elapsedTime = util.getCurrentPhysicalTime().subtract(startTime);
    //         console.log("Elapsed time: " + elapsedTime);
    //         util.requestStop();
    //     }
    // =}  

    source.sort_msg -> unit.sort_in;
    source.result_msg -> unit.result_in;
    source.position_msg -> unit.position_in;
    unit.result_out -> source.result;
    //source.end -> runner.finish;

}