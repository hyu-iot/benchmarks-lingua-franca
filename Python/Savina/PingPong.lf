/**
 * Basic benchmark from the Savina benchmark suite that is
 * intended to measure message-passing overhead.
 * This is based on https://www.scala-lang.org/old/node/54
 * See https://shamsimam.github.io/papers/2014-agere-savina.pdf.
 * 
 * Ping introduces a microstep delay using a logical action
 * to break the causality loop.
 * 
 * To get a sense, some (informal) results for 1,000,000 ping-pongs
 * on my PC:
 * 
 * Unthreaded: 2.1 secs
 * Threaded: 2.4 secs
 * 
 * 
 * These measurements are total execution time, including startup and shutdown.
 * 
 * With some benchmarking using "python3 -m cProfile PingPong.py", here are some
 * preliminary stats on overhead:
 *
 * reaction (serve) -> send : 0.322 secs
 * reaction (receive) -> serve : 0.353 secs
 * reaction(receive) -> send : 0.349
 * schedule() : 0.157 secs
 * set() : 0.168 secs
 * Python builtins 0.103 secs
 * Overhead introduced by runtime ~0.6 secs
 *
 * @author Soroush Bateni
 */
target Python {
    fast: true
};
reactor Ping(count(1000000)) {
    input receive;
    output send;
    state pingsLeft(count);
    logical action serve;
    reaction (startup) -> send {=
        send.set(self.pingsLeft)
        self.pingsLeft -= 1
    =}
    reaction (serve) -> send {= 
        send.set(self.pingsLeft)
        self.pingsLeft -= 1
    =}
    reaction (receive) -> serve {=
        if self.pingsLeft > 0:
            serve.schedule(0)
        else:
            request_stop()
    =}
}
reactor Pong(expected(1000000)) {
    input receive;
    output send;
    state count(0);
    reaction(receive) -> send {=
        self.count += 1
        send.set(receive.value)
    =}
    reaction(shutdown) {=
        if self.count != self.expected:
            sys.stderr.write("Pong expected to receive {:d} inputs, but it received {:d}.\n".format(self.expected, self.count))
            exit(1)
        print("Success.")
    =}
}

main reactor PingPong {
    ping = new Ping(count = 10000);
    pong = new Pong(expected = 10000);
    ping.send -> pong.receive;
    pong.send -> ping.receive; 
}
