/**
 * Copyright (C) 2020 TU Dresden
 * 
 * Micro-benchmark from the Savina benchmark suite.
 * Intended to measure message passing overhead by stress
 * testing the mailbox of actors.
 * See https://shamsimam.github.io/papers/2014-agere-savina.pdf.
 * 
 * Lacking the mailbox in the reactor model this benchmarks
 * measures message passing overhead and scheduling overhead
 * because of the necessary scheduling after each message which
 * is not necessary in the actor model.
 * 
 * Informal results for 1,000,000 messages
 * on my PC with fast forward enabled:
 * Unthreaded: 178 ms
 * Threaded: 205 ms
 * 
 * For comparison some informal results for 1,000,000 messages
 * on the same PC with the Savina Akka implementation:
 * 
 * Threaded: 157 ms
 * 
 * @author Hannes Klein
 */

target Cpp {
    build-type : RelWithDebInfo
};

import BenchmarkRunner from "../BenchmarkRunner.lf";


reactor ProducerReactor(countTo:int(1000000)) {
    
    public preamble {=
        #include "reactor-cpp/logging.hh"
    =}
    
    state i:int(0); // current counter value
    
    input inStartCounting:void;
    output outFinishedCounting:void;
    
    output outResetCounter:void;
    output outIncrement:void;
    output outRetrieveResult:void;
    input inResult:int;
    logical action count:void;
    
    reaction(inStartCounting) -> count, outResetCounter {=
        // reset counter
        i = 0;
        outResetCounter.set();
        
        count.schedule();
    =}
    
    reaction(count) -> outIncrement, outRetrieveResult, count {=
        
        if(i < countTo) {
            outIncrement.set();
            i += 1;
            count.schedule();
        } else {
            outRetrieveResult.set();
        }
    =}
    
    reaction(inResult) -> outFinishedCounting {=
        if(*(inResult.get()) != countTo) {
            reactor::log::Error() << "ProducerReactor expected " << countTo << ", found: " << *(inResult.get());
        } else {
            reactor::log::Info() << "SUCCESS! received: " << *(inResult.get());
        }
        outFinishedCounting.set();
    =}
}


reactor CountingReactor {
    
    input inReset:void;
    input inIncrement:void;
    input inRetrieveResult:void;
    output outSendResult:int;
    
    state count:int(0);
    
    reaction(inReset) {=
        count = 0;
    =}
    
    reaction(inIncrement) {=
        count++;
    =}
    
    reaction(inRetrieveResult) -> outSendResult {=
        outSendResult.set(count);
    =}
}

main reactor (numIterations:int(12), countTo:int(1000000)) {
    
    producer = new ProducerReactor(countTo = countTo);
    runner = new BenchmarkRunner(numIterations=numIterations);
    
    runner.start -> producer.inStartCounting;
    producer.outFinishedCounting -> runner.finished;
    
    reaction(startup) {=
        printBenchmarkInfo("CountingBenchmark");
        printArgs("numIterations", numIterations, "countTo", countTo);
        printSystemInfo();
    =}
    
    counter = new CountingReactor();
    
    producer.outIncrement -> counter.inIncrement;
    producer.outResetCounter -> counter.inReset;
    producer.outRetrieveResult -> counter.inRetrieveResult;
    counter.outSendResult -> producer.inResult;
}
