/**
 * Copyright (C) 2020 TU Dresden
 * 
 * Basic benchmark from the Savina benchmark suite that is
 * intended to measure message-passing overhead.
 * This is based on https://www.scala-lang.org/old/node/54
 * See https://shamsimam.github.io/papers/2014-agere-savina.pdf.
 * 
 * Ping introduces a microstep delay using a logical action
 * to break the causality loop.
 * 
 * To get a sense, some (informal) results for 1,000,000 ping-pongs
 * on my PC with fast forward enabled:
 * 
 * Unthreaded: 215 ms
 * Threaded: 255 ms
 * 
 * There is no parallelism in this application, so it does not benefit from being
 * being threaded, just some additional overhead.
 * 
 * For comparison some informal results for 1,000,000 ping-pongs
 * on the same PC with the Savina Akka implementation:
 * 
 * Threaded: 1054 ms
 * 
 * @author Hannes Klein
 */

target Cpp {
    build-type : RelWithDebInfo,
};

import BenchmarkRunner from "../BenchmarkRunner.lf";

reactor Ping(count:unsigned(1000000)) {
    
    state pings_left:unsigned(0);
    
    input inStart:void;
    output outFinished:void;
    
    output outPing:void;
    input inPong:void;

    logical action serve;
    
    reaction(inStart) -> serve {=
        
        // reset local state
        pings_left = count;
        
        // start execution
        serve.schedule();
    =}
    
    reaction(serve) -> outPing {=
        pings_left -= 1;
        outPing.set();
    =}
    
    reaction (inPong) -> serve, outFinished {=
        if (pings_left == 0) {
            outFinished.set();
        } else {
            serve.schedule();
        }
    =}
}


reactor Pong {
    
    input inPing:void;
    output outPong:void;
    
    reaction(inPing) -> outPong {=
        outPong.set();   
    =}
}


main reactor (numIterations:int(12), count:unsigned(1000000)) {
    
    ping = new Ping(count=count);
    runner = new BenchmarkRunner(numIterations=numIterations);
    
    runner.start -> ping.inStart;
    ping.outFinished -> runner.finished;
    
    reaction(startup) {=
        printBenchmarkInfo("PingPongBenchmark");
        printArgs("numIterations", numIterations, "count", count);
        printSystemInfo();
    =}
    
    pong = new Pong();
    
    ping.outPing -> pong.inPing;
    pong.outPong -> ping.inPong;
}
